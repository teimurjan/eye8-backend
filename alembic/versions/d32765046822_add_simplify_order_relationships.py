"""add simplify order relationships

Revision ID: d32765046822
Revises: 66e92024b802
Create Date: 2020-09-30 11:08:21.278636

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "d32765046822"
down_revision = "66e92024b802"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    op.add_column(
        "promo_code", sa.Column("products_ids", sa.ARRAY(sa.Integer()), nullable=True)
    )
    result = conn.execute(
        """
        SELECT promo_code_id, product_id
        FROM product_x_promo_code;
        """
    )
    promo_code_products = {}
    for row in result:
        promo_code_id = row[0]
        product_id = row[1]
        existing_products_ids = promo_code_products.get(promo_code_id)
        if existing_products_ids is not None:
            promo_code_products[promo_code_id] = [*existing_products_ids, product_id]
    for promo_code_id, products_ids in promo_code_products.items():
        conn.execute(
            f"""
            UPDATE promo_code
            SET products_ids={{{products_ids.join(', ')}}}
            WHERE id={promo_code_id};
            """
        )

    op.add_column("order", sa.Column("promo_code_amount", sa.Float(), nullable=True))
    op.add_column(
        "order", sa.Column("promo_code_discount", sa.Integer(), nullable=True)
    )
    op.add_column(
        "order",
        sa.Column("promo_code_products_ids", sa.ARRAY(sa.Integer()), nullable=True),
    )
    op.add_column(
        "order", sa.Column("promo_code_value", sa.String(length=60), nullable=True)
    )
    result = conn.execute(
        """
        SELECT o.id, promo_code.amount, promo_code.discount, promo_code.products_ids, promo_code.value FROM "order" as o
        LEFT OUTER JOIN promo_code
        ON o.promo_code_id = promo_code.id;
        """
    )
    for row in result:
        order_id = row[0]
        amount = row[1]
        discount = row[2]
        products_ids = row[3]
        value = row[4]
        conn.execute(
            f"""
            UPDATE "order"
            SET promo_code_amount={amount or 'NULL'}, promo_code_discount={discount or 'NULL'}, promo_code_products_ids={products_ids or 'NULL'}, promo_code_value={value or 'NULL'}
            WHERE id={order_id};
            """
        )

    op.drop_index(
        "ix_product_x_promo_code_product_id", table_name="product_x_promo_code"
    )
    op.drop_table("product_x_promo_code")
    op.drop_constraint("order_promo_code_id_fkey", "order", type_="foreignkey")
    op.drop_column("order", "promo_code_id")
    op.drop_column("order_item", "product_upc")
    op.drop_constraint("product_upc_key", "product", type_="unique")
    op.drop_column("product", "upc")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("promo_code", "products_ids")
    op.add_column(
        "product", sa.Column("upc", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_unique_constraint("product_upc_key", "product", ["upc"])
    op.add_column(
        "order_item",
        sa.Column("product_upc", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "order",
        sa.Column("promo_code_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.create_foreign_key(
        "order_promo_code_id_fkey", "order", "promo_code", ["promo_code_id"], ["id"]
    )
    op.drop_column("order", "promo_code_value")
    op.drop_column("order", "promo_code_products_ids")
    op.drop_column("order", "promo_code_discount")
    op.drop_column("order", "promo_code_amount")
    op.create_table(
        "product_x_promo_code",
        sa.Column("product_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("promo_code_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"], ["product.id"], name="product_x_promo_code_product_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["promo_code_id"],
            ["promo_code.id"],
            name="product_x_promo_code_promo_code_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "product_id", "promo_code_id", name="product_x_promo_code_pkey"
        ),
    )
    op.create_index(
        "ix_product_x_promo_code_product_id",
        "product_x_promo_code",
        ["product_id"],
        unique=False,
    )
    # ### end Alembic commands ###
