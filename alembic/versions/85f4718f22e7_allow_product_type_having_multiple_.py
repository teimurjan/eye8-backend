"""allow product type having multiple categories

Revision ID: 85f4718f22e7
Revises: 49f65be4ef36
Create Date: 2020-07-11 17:49:23.722374

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '85f4718f22e7'
down_revision = '49f65be4ef36'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('product_type_x_category',
                    sa.Column('product_type_id', sa.Integer(), nullable=False),
                    sa.Column('category_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['category_id'], ['category.id'], ),
                    sa.ForeignKeyConstraint(['product_type_id'], [
                                            'product_type.id'], ),
                    sa.PrimaryKeyConstraint('product_type_id', 'category_id')
                    )

    conn = op.get_bind()
    result = conn.execute('SELECT id, category_id from product_type;')
    for row in result:
        product_type_id = row[0]
        category_id = row[1]
        conn.execute(
            f'INSERT INTO product_type_x_category (product_type_id, category_id) VALUES ({product_type_id}, {category_id});')

    op.drop_constraint('product_type_category_id_fkey',
                       'product_type', type_='foreignkey')
    op.drop_column('product_type', 'category_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('product_type', sa.Column(
        'category_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('product_type_category_id_fkey',
                          'product_type', 'category', ['category_id'], ['id'])

    conn = op.get_bind()
    default_category_id = conn.execute('SELECT id from category;').first()[0]
    result = conn.execute('SELECT id from product_type;')
    for raw in result:
        product_type_id = raw[0]
        category = conn.execute(
            f'''
            SELECT category_id from product_type_x_category
            WHERE product_type_id={product_type_id}
            LIMIT 1;
            '''
        ).first()
        
        conn.execute(
            f'''
            UPDATE product_type
            SET category_id={category[0] if category and category[0] else default_category_id}
            WHERE product_type.id={product_type_id};
            '''
        )

    op.alter_column('product_type', 'category_id', nullable=False)

    op.drop_table('product_type_x_category')
    # ### end Alembic commands ###
